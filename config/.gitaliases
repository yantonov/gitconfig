[alias]
# list of aliases
aliases = "config --get-regexp alias"

# common
co = "checkout"
br = "branch -vv"
st = "status --long"
cm = "commit -m"
ca = "commit --amend"
cat = "cat-file -p"
ps = "push"
pl = "pull"
pr = "pull --rebase"
unstage = "reset HEAD --"
rc = "rebase --continue"
ra = "rebase --abort"
rs = "rebase --skip"
mc = "merge --no-ff"
cp = "cherry-pick"

# stash
staash = "stash --include-untracked"

# current branch
cb = "rev-parse --abbrev-ref HEAD"

# current commit hash
chash = "rev-parse HEAD"

# kill deleted remote branches
purge-br = "fetch --prune"
# kill outdated local branches without fetching new ones
clean-br = "remote prune"

# LOG
# simple one line log
ls = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' -n 10
# changed files
ll = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' --decorate --numstat -n 10
# no colors
lnc = log --pretty=format:"%h\\ %s\\ [%cn]"  -n 10
# commits with dates
ldt = log --all --pretty=format:'%Cred%h%Creset %Cgreen%ad%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' -n 10
# commits with short dates
lds = "ldt --date=short"
# commits with relative dates
ldr = "ldt --date=relative"
# commits with date and times
ldi = "ldt --date=iso"
# graph representation
lgraph = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci)%Creset %C(bold blue)<%an>%Creset' -n 10
# default look for short git log
ldef = log --oneline --decorate -n 10
# commits related to a file
filelog = log -u
fl = log -u
# last commit
lc = "ll -1"

# DIFF
# Show a diff last commit:
df  = "diff --color HEAD"
dfc = "diff --color --cached HEAD"
# Show content (full diff) of a commit given a revision:
dfr = "!f() { if [ -z "$1" ]; then echo 'revision is not defined'; echo 'usage git dr <revision>'; else git diff "$1"^.."$1"; fi }; f"
# show list of changed files, example: git changed HEAD~
changed = "diff --name-only"

# GREP/SEARCH
# Search/grep your entire codebase for a string:
gr = grep -Ii
# Grep from root folder:
gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name --color -In $1 && cd $A; }; f"
# Find a file path in codebase:
f = "!git ls-files | grep -i"

# FIX
# something like hg rollback
rollback = "reset --soft HEAD~"
# remove already committed trash
drop = "reset --hard HEAD^"

# reset working directory
clear = "reset --hard"

# cleanup untracked files
purge = "clean -d -i"
show-purge = "clean -d -n"

# REPOSITORY ROOT
top = "!f() { TOPLEVEL=$(git rev-parse --show-toplevel) && echo $TOPLEVEL; }; f"
root = "!git top"

# force
please = "push --force-with-lease"

# settings
# typical usage check current credential to make sure you sure correct information between personal and working projects
whoami = "!f() { git config user.name; git config user.email; }; f"
